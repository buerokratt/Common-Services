declaration:
  call: declare
  version: 0.1
  name: Member Participation Statistics Service
  description: A service that provides participation statistics for Riigikogu members.
  method: get
  returns: json
  namespace: common-services

prepareVariables:
  assign:
    chatId: ${incoming.params.chatId}
    authorId: ${incoming.params.authorId}
    currentDate: ${new Date().toISOString().split('T')[0]} # yyyy-mm-dd
    endDate: ${ incoming.params.input[0] || currentDate}
    startDate: ${ incoming.params.input[1] || new Date(new Date(endDate).setMonth(new Date(endDate).getMonth() - 1)).toISOString().split('T')[0] } # yyyy-mm-dd
    lang: "ET"
    memberName: ${incoming.params.input[3]}
  next: makeAPIRequest

makeAPIRequest:
  call: http.get
  args:
    url: "https://api.riigikogu.ee/api/statistics/participations/plenary?endDate=${endDate}&startDate=${startDate}&lang=${lang}"
    headers:
      accept: "application/json"
  result: attendance
  next: searchMember

searchMember:
  assign:
    memberData: ${attendance.response.body.find(member => member.fullName === memberName)}
  next: assignResponse

assignResponse:
  assign:
    res: ${memberData.fullName + " on olnud perioodil " + startDate + " - " + endDate + " kohal " + memberData.participated + " korda ja puudunud " + memberData.absent + " korda."}
  next: formatMessages

formatMessages:
  call: http.post
  args:
    url: "[#DMAPPER]/common-services/hbs/bot_responses_to_messages"
    headers:
      type: json
    body:
      data:
        {
          "botMessages": "${[res]}",
          "chatId": "${chatId}",
          "authorId": "${authorId}",
          "authorFirstName": "",
          "authorLastName": "",
          "authorTimestamp": "${new Date().toISOString()}",
          "created": "${new Date().toISOString()}",
        }
  result: formatMessage

return_result:
  return: ${formatMessage.response.body}