declaration:
  call: declare
  version: 0.1
  name: Recent voting Service
  description: A service that provides most recent voting results
  method: get
  returns: json
  namespace: common-services

prepareRequest:
  assign:
    chatId: ${incoming.params.chatId}
    authorId: ${incoming.params.authorId}
    lang: "ET"
  next: makeAPIRequest

makeAPIRequest:
  call: http.get
  args:
    url: "https://api.riigikogu.ee/api/votings/last?lang=${lang}"
    headers:
      accept: "application/json"
  result: votingData
  error: returnError
  next: formatResponse

formatResponse:
  assign:
    votingTitle: ${votingData.response.body.description}
    inFavor: ${votingData.response.body.inFavor}
    against: ${votingData.response.body.against}
    neutral: ${votingData.response.body.neutral}
    abstained: ${votingData.response.body.abstained}
  next: assignResponse

assignResponse:
  assign:
    res: ${"'" + votingTitle+ "', Poolt on " + inFavor + ", Vastu on " + against + ", Neutraalsed " + neutral + ", Ei hääletanud " + abstained}
  next: formatMessages

formatMessages:
  call: http.post
  args:
    url: "[#DMAPPER]/common-services/hbs/bot_responses_to_messages"
    headers:
      type: json
    body:
      data:
        {
          "botMessages": "${[res]}",
          "chatId": "${chatId}",
          "authorId": "${authorId}",
          "authorFirstName": "",
          "authorLastName": "",
          "authorTimestamp": "${new Date().toISOString()}",
          "created": "${new Date().toISOString()}",
        }
  result: formatMessage

return_result:
  return: ${formatMessage.response.body}