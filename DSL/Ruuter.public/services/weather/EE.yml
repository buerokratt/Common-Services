declaration:
  call: declare
  version: 1.0.0
  description: "Gets weather information for locations in EE - estonia"
  method: post
  returns: json
  namespace: common-services

# Assigns key variables for processing the request, including API endpoints.
assignVariables:
  assign:
    countryCode: ${ incoming.params.country_code || "EE" } # defaults to estonian
    region: ${"tallinn"} # ${ incoming.params.region || "tallinn"} # uncomment when publicapi.envir issue is solved

    gazeteerUrl: "https://inaadress.maaamet.ee/inaadress"
    publicapiUrl: "https://publicapi.envir.ee/v1/combinedWeatherData"
    ilmmicroserviceUrl: "https://ilmmicroservice.envir.ee/api/forecasts"
  next: getRegionData

# Validates the region input to prevent processing errors.
checkVariables:
  switch:
    - condition: ${typeof region !== 'string' || region.trim() === ""}
      next: error
  next: getRegionData

#
# Retrieves geographical data for the specified region from the gazetteer API.
getRegionData:
  call: http.get
  args:
    url: "${gazeteerUrl}/gazetteer?features=EHAK&results=3&address=${region}"
  result: regionData
  next: assingCoordinates

#
# Extracts longitude and latitude from the region data for further API calls.
assingCoordinates:
  assign:
    longitude: ${regionData.response.body.addresses[0].viitepunkt_l}
    latitude: ${regionData.response.body.addresses[0].viitepunkt_b}
  next: logStep

logStep:
  log: "COORDINATES: ${longitude}, ${latitude}"
  next: assignStationParameters # getNearestStation # uncomment when publicapi.envir issue is solved

# uncomment when publicapi.envir issue is solved
# # Finds the nearest weather station using the provided coordinates.
# getNearestStation:
#   call: http.get
#   args:
#     # url: https://publicapi.envir.ee/v1/combinedWeatherData/nearestStationByCoordinates?longitude=24.7535&latitude=59.4370
#     url: "${publicapiUrl}/nearestStationByCoordinates?longitude=${longitude}&latitude=${latitude}"
#     header:
#       Accept: "application/json"
#   result: nearestWeatherStation
#   next: assignStationParameters


# Assigns the station ID - nearest weather station response.
assignStationParameters:
  assign:
    stationId: "199" # ${nearestWeatherStation.response.body.entries.entry[0].id} # uncomment when publicapi.envir issue is solved
  next: getWeather

# Get weather data from selected weather station.
getWeather:
  call: http.get
  args:
    url: "${ilmmicroserviceUrl}/mobileLocationForecast?latitude=${latitude}&longitude=${longitude}&stationId=${stationId}"
  result: weather
  next: serveResult

# Weather data as a response to query (JSON).
serveResult:
  return: ${weather.response.body.entries.entry}
  next: end

# Handles invalid region input with an error message.
error:
  return: "Error: Wrong region value - Region required"
  next: end
